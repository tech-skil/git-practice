$ git status
# Shows the current status of the working directory and staging area.
$ git config --global user.name "Jayanth"
# Sets the global Git username to "Jayanth".
$ git config --global user.email "jayanthjay295@gmail.com"
# Sets the global Git email to "jayanthjay295@gmail.com".
$ git config --list
# Lists all the Git configuration settings.
$ git config --global core.editor emacs
# Sets the global Git editor to Emacs.
$ git config --global core.editor vim
# Sets the global Git editor to Vim.
$ git config user.name
# Displays the current Git username.
$ git config --list > git_config.txt
# Saves the list of all Git configuration settings to a file named git_config.txt.
$ git init
# Initializes a new Git repository.
$ git add -a
# Incorrect command. Use `$ git add -A` to add all changes to the staging area.
$ git add --a
# Incorrect command. Use `$ git add -A` to add all changes to the staging area.
$ git commit -m
# Incorrect usage. The `-m` flag requires a commit message.
$ git commit -m "Initial commit"
# Commits the staged changes with the message "Initial commit".
$ git log
# Shows the commit history.
$ q
# Exits the git log view.
$ git add first.txt
# Adds the file first.txt to the staging area.
$ git commit -m "Changes text.txt and added some more details"
# Commits the staged changes with the message "Changes text.txt and added some more details".
$ rm -rf .git
# Removes the .git directory, effectively deleting the Git repository.
$ git clone https://github.com/devmuhib/MernStack-Tour-Management.git
# Clones the repository from the provided URL to the current directory.
$ git clone https://github.com/devmuhib/MernStack-Tour-Management.git projecttravel
# Clones the repository from the provided URL to a directory named 'projecttravel'.
$ ls
# Lists the files and directories in the current directory.
$ touch error.log
# Creates an empty file named error.log.
$ touch .gitignore
# Creates an empty .gitignore file to specify intentionally untracked files to ignore.

$ touch error.log
# Creates a new empty file named "error.log". Think of it as "touching" a file into existence.

$ touch .gitignore
# Creates a new empty file named ".gitignore". This special file tells Git which files to ignore.

$ git diff
# Shows what changes you've made but haven't yet staged or committed.

$ git diff --staged
# Shows changes that have been staged but not yet committed.


$ git commit -a -m "Direct commit"
# Stages all modified files and commits them with the message "Direct commit".


$ git rm neet/dir/gh.txt
rm 'neet/dir/gh.txt'
# Removes the file 'gh.txt' from both the working directory and the Git repository.


$ git mv first.txt first_rename.txt
# Renames 'first.txt' to 'first_rename.txt' and stages this change for the next commit.


$ git rm --cached db.accdb
rm 'db.accdb'
# Removes 'db.accdb' from Git tracking without deleting it from the local filesystem.

$ git log -p
# Shows the commit history along with the diff (changes) introduced in each commit.


$ git log --stat
# Shows the commit history with a summary of file changes for each commit.

$ git log --pretty=oneline
# Displays each commit on a single line, showing the full commit hash and commit message.

$ git log --pretty=full
# Shows commits with full commit message, author, and committer information.

$ git log --pretty=short
# Displays commits with a brief format showing the author and short commit message.


$ git log --since=2.days
# Shows commits made within the last 2 days.

$ git log --since=2.years
# Displays commits made within the last 2 years.

$ git log --since=2.months
# Lists commits made within the last 2 months.


$ git log --pretty=format:"%H -- %an"
# Displays each commit with its full hash and author name in a custom format.

$ git restore --staged git_config.txt
# Unstages the file 'git_config.txt', keeping the file in the working directory unchanged.

$ git log -p -1
# Shows the diff (changes) for the most recent commit.

$ git checkout -- git_config.txt
# Discards changes in the working directory for 'git_config.txt', reverting it to the last committed version.

$ git checkout -f
# Forcefully discards all local changes and switches to the last committed state of the entire repository.

# Contents of .gitignore file:
# .gitignore file
# error.log
# Tells Git to ignore the specific file named "error.log".

*.log
# Ignores all files that end with ".log". The star (*) means "any characters".

# dir/
# This line is commented out (inactive). If used, it would ignore a folder named "dir" anywhere in the project.

/dir/
# Ignores a folder named "dir", but only if it's in the root of the project. The leading slash (/) means "start from the root".

# git remote repositories

##Generate new ssh key

$ ssh-keygen -t rsa -b 4096 -C "jayanthjay295@gmail.com"
# Generates a new RSA SSH key pair with 4096 bits and the specified email as a comment.

$ eval $(ssh-agent -s)
# Starts the SSH agent and sets up the necessary environment variables.

$ ssh-add ~/.ssh/id_rsa
# Adds your SSH private key to the SSH agent for authentication.

$ tail ~/.ssh/id_rsa.pub
ssh-rsa SSH-Key jayanthjay295@gmail.com

# Displays the contents of the public SSH key file.

$ git remote
# Lists the names of all remote repositories configured for the current project.

$ git remote add origin https://github.com/tech-skil/git-practice.git
# Adds a new remote named 'origin' pointing to the specified GitHub repository URL.

$ git remote -v
origin  https://github.com/tech-skil/git-practice.git (fetch)
origin  https://github.com/tech-skil/git-practice.git (push)
# Lists all remote repositories with their URLs for fetching and pushing.

$ git push -u origin master
# Pushes the local 'master' branch to the 'origin' remote and sets up tracking.

#git alias

$ git config --global alias.st status
# Creates a global Git alias 'st' for the 'status' command.

$ git st
# Uses the newly created alias to run 'git status'.

$ git config --global alias.unstage 'restore --staged'
# Creates a global Git alias 'unstage' for the 'restore --staged' command.

$ git unstage git_config.txt
# Uses the newly created alias to unstage the file 'git_config.txt'.

#git branching